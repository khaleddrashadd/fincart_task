/* eslint-disable */

// @ts-nocheck

// noinspection JSUnusedGlobalSymbols

// This file was automatically generated by TanStack Router.
// You should NOT make any changes in this file as it will be overwritten.
// Additionally, you should also exclude this file from your linter and/or formatter to prevent it from being checked or modified.

import { Route as rootRouteImport } from './routes/__root'
import { Route as appRouteRouteImport } from './routes/(app)/route'
import { Route as IndexRouteImport } from './routes/index'
import { Route as authRegisterRouteImport } from './routes/(auth)/register'
import { Route as authLoginRouteImport } from './routes/(auth)/login'
import { Route as appSlotsIndexRouteImport } from './routes/(app)/slots/index'
import { Route as appServiceIndexRouteImport } from './routes/(app)/service/index'
import { Route as appServiceIdRouteImport } from './routes/(app)/service/$id'

const appRouteRoute = appRouteRouteImport.update({
  id: '/(app)',
  getParentRoute: () => rootRouteImport,
} as any)
const IndexRoute = IndexRouteImport.update({
  id: '/',
  path: '/',
  getParentRoute: () => rootRouteImport,
} as any)
const authRegisterRoute = authRegisterRouteImport.update({
  id: '/(auth)/register',
  path: '/register',
  getParentRoute: () => rootRouteImport,
} as any)
const authLoginRoute = authLoginRouteImport.update({
  id: '/(auth)/login',
  path: '/login',
  getParentRoute: () => rootRouteImport,
} as any)
const appSlotsIndexRoute = appSlotsIndexRouteImport.update({
  id: '/slots/',
  path: '/slots/',
  getParentRoute: () => appRouteRoute,
} as any)
const appServiceIndexRoute = appServiceIndexRouteImport.update({
  id: '/service/',
  path: '/service/',
  getParentRoute: () => appRouteRoute,
} as any)
const appServiceIdRoute = appServiceIdRouteImport.update({
  id: '/service/$id',
  path: '/service/$id',
  getParentRoute: () => appRouteRoute,
} as any)

export interface FileRoutesByFullPath {
  '/': typeof appRouteRouteWithChildren
  '/login': typeof authLoginRoute
  '/register': typeof authRegisterRoute
  '/service/$id': typeof appServiceIdRoute
  '/service': typeof appServiceIndexRoute
  '/slots': typeof appSlotsIndexRoute
}
export interface FileRoutesByTo {
  '/': typeof appRouteRouteWithChildren
  '/login': typeof authLoginRoute
  '/register': typeof authRegisterRoute
  '/service/$id': typeof appServiceIdRoute
  '/service': typeof appServiceIndexRoute
  '/slots': typeof appSlotsIndexRoute
}
export interface FileRoutesById {
  __root__: typeof rootRouteImport
  '/': typeof IndexRoute
  '/(app)': typeof appRouteRouteWithChildren
  '/(auth)/login': typeof authLoginRoute
  '/(auth)/register': typeof authRegisterRoute
  '/(app)/service/$id': typeof appServiceIdRoute
  '/(app)/service/': typeof appServiceIndexRoute
  '/(app)/slots/': typeof appSlotsIndexRoute
}
export interface FileRouteTypes {
  fileRoutesByFullPath: FileRoutesByFullPath
  fullPaths:
    | '/'
    | '/login'
    | '/register'
    | '/service/$id'
    | '/service'
    | '/slots'
  fileRoutesByTo: FileRoutesByTo
  to: '/' | '/login' | '/register' | '/service/$id' | '/service' | '/slots'
  id:
    | '__root__'
    | '/'
    | '/(app)'
    | '/(auth)/login'
    | '/(auth)/register'
    | '/(app)/service/$id'
    | '/(app)/service/'
    | '/(app)/slots/'
  fileRoutesById: FileRoutesById
}
export interface RootRouteChildren {
  IndexRoute: typeof IndexRoute
  appRouteRoute: typeof appRouteRouteWithChildren
  authLoginRoute: typeof authLoginRoute
  authRegisterRoute: typeof authRegisterRoute
}

declare module '@tanstack/react-router' {
  interface FileRoutesByPath {
    '/(app)': {
      id: '/(app)'
      path: '/'
      fullPath: '/'
      preLoaderRoute: typeof appRouteRouteImport
      parentRoute: typeof rootRouteImport
    }
    '/': {
      id: '/'
      path: '/'
      fullPath: '/'
      preLoaderRoute: typeof IndexRouteImport
      parentRoute: typeof rootRouteImport
    }
    '/(auth)/register': {
      id: '/(auth)/register'
      path: '/register'
      fullPath: '/register'
      preLoaderRoute: typeof authRegisterRouteImport
      parentRoute: typeof rootRouteImport
    }
    '/(auth)/login': {
      id: '/(auth)/login'
      path: '/login'
      fullPath: '/login'
      preLoaderRoute: typeof authLoginRouteImport
      parentRoute: typeof rootRouteImport
    }
    '/(app)/slots/': {
      id: '/(app)/slots/'
      path: '/slots'
      fullPath: '/slots'
      preLoaderRoute: typeof appSlotsIndexRouteImport
      parentRoute: typeof appRouteRoute
    }
    '/(app)/service/': {
      id: '/(app)/service/'
      path: '/service'
      fullPath: '/service'
      preLoaderRoute: typeof appServiceIndexRouteImport
      parentRoute: typeof appRouteRoute
    }
    '/(app)/service/$id': {
      id: '/(app)/service/$id'
      path: '/service/$id'
      fullPath: '/service/$id'
      preLoaderRoute: typeof appServiceIdRouteImport
      parentRoute: typeof appRouteRoute
    }
  }
}

interface appRouteRouteChildren {
  appServiceIdRoute: typeof appServiceIdRoute
  appServiceIndexRoute: typeof appServiceIndexRoute
  appSlotsIndexRoute: typeof appSlotsIndexRoute
}

const appRouteRouteChildren: appRouteRouteChildren = {
  appServiceIdRoute: appServiceIdRoute,
  appServiceIndexRoute: appServiceIndexRoute,
  appSlotsIndexRoute: appSlotsIndexRoute,
}

const appRouteRouteWithChildren = appRouteRoute._addFileChildren(
  appRouteRouteChildren,
)

const rootRouteChildren: RootRouteChildren = {
  IndexRoute: IndexRoute,
  appRouteRoute: appRouteRouteWithChildren,
  authLoginRoute: authLoginRoute,
  authRegisterRoute: authRegisterRoute,
}
export const routeTree = rootRouteImport
  ._addFileChildren(rootRouteChildren)
  ._addFileTypes<FileRouteTypes>()
